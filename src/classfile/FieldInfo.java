package classfile;
/**
4.6 Fields
Each field is described by a field_info structure. No two fields in one class file
may have the same name and descriptor (§4.4.2). The format of this structure is
field_info {
u2 access_flags;
u2 name_index;
u2 descriptor_index;
u2 attributes_count;
attribute_info attributes[attributes_count];
}
The items of the field_info structure are as follows:
 */
public class FieldInfo implements MemberInfo {

    /**
     The value of the access_flags item is a mask of flags used to
denote access permission to and properties of this field. The
interpretation of each flag, when set, is as shown in Table 4.4.
Table 4.4 Field access and property flags
Flag Name Value Interpretation
ACC_PUBLIC 0x0001 Declared public; may be accessed from outside its package.
ACC_PRIVATE 0x0002 Declared private; usable only within the defining class.
ACC_PROTECTED 0x0004 Declared protected; may be accessed within subclasses.
ACC_STATIC 0x0008 Declared static.
ACC_FINAL 0x0010 Declared final; no further assignment after initialization.
ACC_VOLATILE 0x0040 Declared volatile; cannot be cached.
ACC_TRANSIENT 0x0080 Declared transient; not written or read by a persistent object manager.
ACC_SYNTHETIC 0x1000 Declared synthetic; Not present in the source code.
ACC_ENUM 0x4000 Declared as an element of an enum.

The ACC_ENUM bit is indicates that this field is being used
to hold an element of an enumerated type.
A field may be marked with the ACC_SYNTHETIC flag to
indicate that it was generated by the compiler and does not appear
in the source code.
Fields of classes may set any of the flags in Table 4.4.
However, a specific field of a class may have at most one of its
ACC_PRIVATE, ACC_PROTECTED, and ACC_PUBLIC flags set
(§2.7.4) and must not have both its ACC_FINAL and
ACC_VOLATILE flags set (§2.9.1).
All fields of interfaces must have their ACC_PUBLIC,
ACC_STATIC, and ACC_FINAL flags set; they may have their
ACC_SYNTHETIC flag set and must not have any of the other flags
in Table 4.4 set (§2.13.3.1).
All bits of the access_flags item not assigned in Table 4.4
are reserved for future use. They should be set to zero in
generated class files and should be ignored by Java virtual
machine implementations.
     */
    public short accessFlags;
    /**
     The value of the name_index item must be a valid index into the
constant_pool table. The constant_pool entry at that index
must be a CONSTANT_Utf8_info (§4.5.7) structure which must
represent a valid unqualified name (§4.3.2) denoting a field.
     */
    public short nameIndex;
    /**
     The value of the descriptor_index item must be a valid index
into the constant_pool table. The constant_pool entry at that
index must be a CONSTANT_Utf8_info (§4.5.7) structure that
must represent a valid field descriptor (§4.4.2).
     */
    public short descriptorIndex;
    /**
     The value of the attributes_count item indicates the number
of additional attributes (§4.8) of this field.
     */
    public short attributesCount;
    /**
     Each value of the attributes table must be an attribute structure
(§4.8). A field can have any number of attributes associated with it.
The attributes defined by this specification as appearing in the
attributes table of a field_info structure are the ConstantValue
(§4.8.2), Synthetic (§4.8.8), Signature (§4.8.9) and Deprecated
(§4.8.15) attributes.
A Java virtual machine implementation must recognize and
correctly read ConstantValue (§4.8.2) attributes found in the
attributes table of a field_info structure. If a Java virtual
machine recognizes class files whose major version is 49.0 or above, it
must recognize and correctly read Signature (§4.8.9) attributes
found in the attributes table of a field_info structure. A
Java virtual machine implementation is required to silently ignore
any or all other attributes in the attributes table that it does not
recognize. Attributes not defined in this specification are not
allowed to affect the semantics of the class file, but only to
provide additional descriptive information (§4.8.1).
     */
    public AttributeInfo[] attributes;

    public boolean isValid() {
        if (attributes.length != attributesCount) {
            return false;
        }
        return true;
    }

    @Deprecated
    public String getAccessText() {
        StringBuilder buf = new StringBuilder(60);

        short accessFlags = this.accessFlags;
        if ((accessFlags & ACC_PUBLIC) != 0) {
            buf.append("public ");
        }

        if ((accessFlags & ACC_PRIVATE) != 0) {
            buf.append("private ");
        }

        if ((accessFlags & ACC_PROTECTED) != 0) {
            buf.append("protected ");
        }

        if ((accessFlags & ACC_STATIC) != 0) {
            buf.append("static ");
        }

        if ((accessFlags & ACC_FINAL) != 0) {
            buf.append("final ");
        }

        if ((accessFlags & ACC_VOLATILE) != 0) {
            buf.append("volatile ");
        }

        if ((accessFlags & ACC_TRANSIENT) != 0) {
            buf.append("transient ");
        }

        if ((accessFlags & ACC_SYNTHETIC) != 0) {
            buf.append("/*synthetic*/ ");
        }
        if ((accessFlags & ACC_ENUM) != 0) {
            buf.append("/*enum*/ ");
        }
        return buf.toString();
    }

    /** Declared public; may be accessed from outside its package. */
    public final static short ACC_PUBLIC = 0x0001;
    /** Declared private; usable only within the defining class. */
    public final static short ACC_PRIVATE = 0x0002;
    /** Declared protected; may be accessed within subclasses. */
    public final static short ACC_PROTECTED = 0x0004;
    /** Declared static. */
    public final static short ACC_STATIC = 0x0008;
    /** Declared final; no subclasses allowed. */
    public final static short ACC_FINAL = 0x0010;
    /** Declared volatile; cannot be cached. */
    public final static short ACC_VOLATILE = 0x0040;
    /** Declared transient; not written or read by a persistent object manager. */
    public final static short ACC_TRANSIENT = 0x0080;
    /** Declared synthetic; Not present in the source code. */
    public final static short ACC_SYNTHETIC = (short) 0x1000;
    /** Declared as an element of an enum. */
    public final static short ACC_ENUM = (short) 0x4000;
}
