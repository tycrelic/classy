package classfile;

/**
4.7 Methods
Each method, including each instance initialization method (§3.9)(§3.9) and the
class or interface initialization method (§3.9)(§3.9), is described by a method_info
structure. No two methods in one class file may have the same name and descriptor
(§4.4.3).
The structure has the following format:
method_info {
u2 access_flags;
u2 name_index;
u2 descriptor_index;
u2 attributes_count;
attribute_info attributes[attributes_count];
}
The items of the method_info structure are as follows:

 */
public class MethodInfo implements MemberInfo {

    /**
    The value of the access_flags item is a mask of flags used to
    denote access permission to and properties of this method. The
    interpretation of each flag, when set, is as shown in Table 4.5.
    Flag Name Value Interpretation
    ACC_PUBLIC 0x0001 Declared public; may be accessed from outside its package.
    ACC_PRIVATE 0x0002 Declared private; accessible only within the defining class.
    ACC_PROTECTED 0x0004 Declared protected; may be accessed within subclasses.
    ACC_STATIC 0x0008 Declared static.
    ACC_FINAL 0x0010 Declared final; must not be overridden.
    ACC_SYNCHRONIZED 0x0020 Declared synchronized; invocation is wrapped in a monitor lock.
    ACC_BRIDGE 0x0040 A bridge method, generated by the compiler.
    ACC_VARARGS 0x0080 Declared with variable number of arguments.
    ACC_NATIVE 0x0100 Declared native; implemented in a language other than Java.
    ACC_ABSTRACT 0x0400 Declared abstract; no implementation is provided.
    ACC_STRICT 0x0800 Declared strictfp; floating-point mode is FP-strict
    ACC_SYNTHETIC 0x1000 Declared synthetic; Not present in the source code.

    The ACC_VARARGS flag indicates that this method takes a
    variable number of arguments at the source code level. A method
    declared to take a variable number of arguments must be
    compiled with the ACC_VARARGS flag set to 1. All other
    methods must be compiled with the ACC_VARARGS flag set to
    0. The ACC_BRIDGE method is used to indicate a bridge method
    generated by the compiler.
    A method may be marked with the ACC_SYNTHETIC flag
    to indicate that it was generated by the compiler and does not
    appear in the source code.
    Methods of classes may set any of the flags in Table 4.5.
    However, a specific method of a class may have at most one of its
    ACC_PRIVATE, ACC_PROTECTED, and ACC_PUBLIC flags set
    (§2.7.4). If such a method has its ACC_ABSTRACT flag set
    it must not have any of its ACC_FINAL, ACC_NATIVE,
    ACC_PRIVATE, ACC_STATIC, ACC_STRICT, or
    ACC_SYNCHRONIZED flags set (§2.13.3.2).
    All interface methods must have their ACC_ABSTRACT and
    ACC_PUBLIC flags set; they may have their ACC_VARARGS,
    ACC_BRIDGE and ACC_SYNTHETIC flags set and must not have
    any of the other flags in Table 4.5 set (§2.13.3.2).
    A specific instance initialization method (§3.9) may
    have at most one of its ACC_PRIVATE, ACC_PROTECTED, and
    ACC_PUBLIC flags set and may also have its ACC_STRICT,
    ACC_VARARGS, and ACC_SYNTHETIC flags set, but must not have
    any of the other flags in Table 4.5 set.
    Class and interface initialization methods (§3.9) are
    called implicitly by the Java virtual machine; the value of their
    access_flags item is ignored except for the settings of the
    ACC_STRICT flag.
    All bits of the access_flags item not assigned in Table 4.5
    are reserved for future use. They should be set to zero in
    generated class files and should be ignored by Java virtual
    machine implementations.
     */
    public short accessFlags;
    /**
    The value of the name_index item must be a valid index into the
    constant_pool table. The constant_pool entry at that index
    must be a CONSTANT_Utf8_info (§4.5.7) structure representing
    either one of the special method names (§3.9)(§3.9), &lt;init> or
    &lt;clinit>, or a valid unqualified name (§4.3.2) denoting a
    method.
     */
    public short nameIndex;
    /**
    The value of the descriptor_index item must be a valid index
    into the constant_pool table. The constant_pool entry at that
    index must be a CONSTANT_Utf8_info (§4.5.7) structure
    representing a valid method descriptor (§4.4.3).
     */
    public short descriptorIndex;
    /**
    The value of the attributes_count item indicates the number
    of additional attributes (§4.8) of this method.
     */
    public short attributesCount;
    /**
    Each value of the attributes table must be an attribute structure
    (§4.8). A method can have any number of optional attributes
    associated with it.
    The only attributes defined by this specification as appearing
    in the attributes table of a method_info structure are the
    Code (§4.8.3), Exceptions (§4.8.5), Synthetic (§4.8.8),
    Signature (§4.8.9) and Deprecated (§4.8.15) attributes.
    A Java virtual machine implementation must recognize and
    correctly read Code (§4.8.3) and Exceptions (§4.8.5) attributes
    found in the attributes table of a method_info structure. If a
    Java virtual machine recognizes class files whose major version is
    49.0 or above, it must recognize and correctly read Signature
    (§4.8.9) attributes found in the attributes table of a
    method_info structure. A Java virtual machine implementation
    is required to silently ignore any or all other attributes in the
    attributes table of a method_info structure that it does not
    recognize. Attributes not defined in this specification are not
    allowed to affect the semantics of the class file, but only to
    provide additional descriptive information (§4.8.1).
     */
    public AttributeInfo[] attributes;

    public boolean isValid() {
        if (attributes.length != attributesCount) {
            return false;
        }
        return true;
    }
    public final static short ACC_PUBLIC = 0x0001; 	//Declared public; may be accessed from outside its package.
    public final static short ACC_PRIVATE = 0x0002;  //Declared private; usable only within the defining class.
    public final static short ACC_PROTECTED = 0x0004;  //Declared protected; may be accessed within subclasses.
    public final static short ACC_STATIC = 0x0008;  //Declared static.
    public final static short ACC_FINAL = 0x0010;  //Declared final; no subclasses allowed.
    public final static short ACC_SYNCHRONIZED = 0x0020;  //Declared synchronized; invocation is wrapped in a monitor lock.
    public final static short ACC_BRIDGE = 0x0040;  //A bridge method, generated by the compiler.
    public final static short ACC_VARARGS = 0x0080;  //Declared with variable number of arguments.
    public final static short ACC_NATIVE = 0x0100;  //Declared native; implemented in a language other than Java.
    public final static short ACC_ABSTRACT = 0x0400;  //Declared abstract; no implementation is provided.
    public final static short ACC_STRICT = 0x0800;  //Declared strictfp; floating-point mode is FP-strict
    public final static short ACC_SYNTHETIC = 0x1000;  //Declared synthetic; Not present in the source code.
}
